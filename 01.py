import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# # 1. Даны значения величины заработной платы заемщиков банка (zp)
# # и значения их поведенческого кредитного скоринга (ks):
# # zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# # ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# # Найдите ковариацию этих двух величин с помощью элементарных действий,
# # а затем с помощью функции cov из numpy. Полученные значения должны быть
# # равны. Найдите коэффициент корреляции Пирсона с помощью ковариации
# # и среднеквадратичных отклонений двух признаков,
# # а затем с использованием функций из библиотек numpy и pandas.

# zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
# ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# cov = np.mean(zp*ks)-np.mean(zp)*np.mean(ks)
# print("Ковариация, найденная вручную:\n", cov)

# print("Ковариация, рассчитанная с помощью функции:\n",
#       np.cov(zp, ks, ddof=0))  

# print("Коэффициет корреляции Пирсона с помощью функции:\n",
#       np.corrcoef(zp, ks))

# print("Несмещенная ковариация:\n", np.cov(zp, ks, ddof=1))
# x = np.std(zp, ddof=1)
# y = np.std(ks, ddof=1)

# print("Смещенная ковариация:\n", np.cov(zp, ks, ddof=0))
# x1 = np.std(zp, ddof=0)
# y1 = np.std(ks, ddof=0)

# print("Корреляция Пирсона через несмещенную ковариацию:\n",
#       10175.38/(x*y))

# print("Корреляция Пирсона через смещенную ковариацию:\n",
#       9157.84/(x1*y1))

# df = pd.DataFrame([(35, 401), (45, 574), (190, 874), (200, 919), (40, 459),
#                    (70, 739), (54, 653), (150, 902), (120, 746), (110, 832)],
#                    columns = ['ks', 'zp'])
# print("Корреляция Пирсона с помощью pandas:\n", df.corr())   

# # Визуализация
# plt.scatter(zp, ks)
# plt.title('r = 0.88749')
# plt.xlabel('x')
# plt.ylabel('y')
# plt.show()

# #  2.Измерены значения IQ выборки студентов,
# # обучающихся в местных технических вузах:
# # 131, 125, 115, 122, 131, 115, 107, 99, 125, 111. Известно,
# # что в генеральной совокупности IQ распределен нормально.Найдите
# # доверительный интервал для математического ожидания с надежностью 0.95.

# array1 = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])

# x = len(array1)
# mean = array1.mean()
# S = array1.std(ddof=1)
# print("Среднее значение=", mean, ",стандартное отклонение =", S)

# t = stats.t.ppf(0.975, x-1)
# print("Коэффициент Стьюдента =", t)

# result = [mean-(t*S)/(x**0.5), mean+(t*S)/(x**0.5)]
# print("Доверительный интервал:", result)

# # 3. Известно, что рост футболистов в сборной распределен нормально с
# # дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки 
# # равен 27, среднее выборочное составляет 174.2. Найдите доверительный
# # интервал для математического ожидания с надежностью 0.95.

# M = 174.2
# n = 27
# sigma = 5

# z = stats.norm.ppf(0.975)

# result = [M-z*(sigma/(n**0.5)), M+z*(sigma/(n**0.5))]
# print("Доверительный интервал:",result)